import { load } from "mime";
import { Provider, Storable } from "./provider";

const providerSymbol = Symbol("provider");

export class StateManager {
  provider: Provider;
  key: string;

  constructor(provider: Provider, keyFn: (obj:StateManager) => string) {
    this.provider = provider;
    Object.defineProperty(this, 'provider', {
      value: provider,
      writable: false,
      configurable: true,
      enumerable: false,
    });
    Object.defineProperty(this, 'key', {
      value: provider,
      writable: false,
      configurable: true,
      enumerable: false,
    });
  }

  async save() {
    this.provider.docSave()
  }

  async load() {

  }

  async delete() {

  }

  subscribe() {

  }

  unsubscribe() {

  }
}


export class StateDoc {
  static finalized: boolean = false;
  static getKey: (doc: StateDoc) => string;

  constructor(provider: unknown) {
    if (!(this.constructor as any).finalized) (this.constructor as any).finalize();
    Object.defineProperty(this, providerSymbol, {
      value: provider,
      writable: false,
      configurable: false,
      enumerable: false,
    });
  }

  static getProvider(doc: StateDoc) {
    return (doc as any)[providerSymbol];
  }

  static setupProperty(name: string, config: object, properties: object[]) {
    Object.defineProperty(this.prototype, providerSymbol, {
      write: () 
      configurable: false,
      enumerable: false,
    });
  }

  static finalize() {
    let properties = (this as any).properties!;
    this.finalized = true;
    Object.keys(properties).forEach((name) => {
      let config = properties[name];
      if (config.key) {
        this.getKey = propCurry(name);
      }
      this.setupProperty(name, config, properties);
      Object.defineProperty(this, providerSymbol, {
        value: provider,
        writable: false,
        configurable: false,
        enumerable: false,
      });
    });
    if (!this.getKey) {
      throw "Must designate one of the properties as {key: true} or define a static getKey(doc) => string function";
    }
  }

  static requestSave(doc: StateDoc, changes:Map<string, Storable>) {
    console.log('requestSave', doc, changes);
  }
}

function propCurry(propName: string) {
  return (obj: any) => obj[propName];
}

function requestUpdateCurry(name: string, config: object, constructor: typeof StateDoc) {
  return function() 
}

export function field(options: any) {
  return function (prototype: any, propertyKey: string) {
    const key = Symbol(propertyKey);

    const getter = function (this: any) {
      console.log("get field", this, options);
      return this[key];
    };
    const setter = function (this: any, newVal: unknown) {
      newVal = newVal + " world";
      this[key] = newVal;
    };
    Object.defineProperty(prototype, propertyKey, {
      get: getter,
      set: setter,
      configurable: true,
      enumerable: true,
    });
  };
}
